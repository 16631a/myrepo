/*
 * AUTHOR : ANZO Controls Pvt Ltd
 *
 * This document is strictly confidential communication to and solely for the use
 * of the recipient and may not be reproduced or circulated without Anzo Controls's
 * Private Limited's prior written consent. If you are not the intended recipient,
 * you should not disclose or use the information in this document in any way.
 * The information is not intended as an offer or solicitation with respect to the
 * usage of this code.
 *
 * Strict legal proceeding would happen in case anyone has been found in violation
 * of the notice as above.
 */

#include <getopt.h>
#include <iostream>
#include <string>
#include "calculation.h"
#include "headers.h"
#include<string>
/*
  Function    : ProcessArgs(int argc, char** argv)
  Accepts     : int argc, char** argv
  Return      : bool
  Abstraction : Take int argc, char** argv as arguments and parse the arguments and \
                retutrns boolean valuE
  modified by : 21-03-22 - Srikanth
*/
bool Measurement::processArgs(int argc, char** argv) {
  /*const char* const short_opts = "g:umdih";

  while (true) {
    const auto opt = getopt_long(argc, argv, short_opts,
                                 nullptr, nullptr);

    if (-1 == opt) {
      break;
    } else {
      switch (opt) {
        case 'g':
          setDebugLevel(std::stoi(optarg));
	  openLogFile(LOG_FILE_NAME);
          break;
        case 'd':
          setOutPutConsoleValue(true);
          break;
        case 'i':
          setImageShowValue(true);
          break;
        case 'u':
          messageText->showUsage(argv);
          return false;
        case 'h':
          messageText->showUsage(argv);
          return false;
        case 'm':
          messageText->showManpage(argv);
          return false;
        case '?': // Unrecognized option
        default:
          messageText->showHelp(argv);
          return false;
      }
    }
  }
  return true;*/
 if(argc > 1 && argv[1][0]=='-')
  for(int i=1 ; i< argc ;i++){
/*******************************************************************************************/
     if(argc==3 && strcmp(argv[1],"--debug")==0 ){
       if((std::string)(argv[3]) !="--"){
	 setDebugLevel(std::stoi(argv[2]));
	 openLogFile(LOG_FILE_NAME);
	 //return true;
       }else{
	 std::cout<<argv[i]<<" option requires an argument integer."<<std::endl;
	 return false;
      }
     }
     if(argc==4 && strcmp(argv[2],"--debug")==0 ){
       if((std::string)(argv[3]) !="--"){
         setDebugLevel(std::stoi(argv[3]));
         openLogFile(LOG_FILE_NAME);
         //return true;
       }else{
         std::cout<<argv[i]<<" option requires an argument integer."<<std::endl;
         return false;
      }
     }

     if( argc ==5 && strcmp(argv[3],"--debug")==0){
       if((std::string)(argv[4]) !="--"){
         setDebugLevel(std::stoi(argv[4]));
         openLogFile(LOG_FILE_NAME);
         //return true;
       }else{
         std::cout<<argv[i]<<" option requires an argument integer."<<std::endl;
         return false;
      }
     }


/******************************************************************************************/
     if(argv[i]=="--showdata"){
       setOutPutConsoleValue(true);
     }
     if(argv[i]=="--showimage"){
       setImageShowValue(true);
     }
     if(argv[i]=="--showusage"){
       messageText->showUsage(argv);
       return false;
     }
     if(argv[i]=="--help"){
       messageText->showUsage(argv);
       return false;
     }
     if(argv[i]=="--showmanpage"){
       messageText->showManpage(argv);
       return false;
     }
  }
 return true;
	

}
/*
  Function    : dimension()
  Accepts     : int argc, char** argv,Agv*
  Return      : None
  Abstraction : Take int argc, char** argv,Barcode* as arguments and parse the arguments and based 
                upon on return value of processArgs function call the application start function
  Modified by : 21-03-22 - Srikanth
*/

void Measurement::dimension(int argc, char **argv,Barcode* agvInfo){
   if(processArgs(argc,argv)){ 
     start();
  }
}


